P@value(P@index(0.3423423))
P@value(P@index(0.3423423))
P@value(P@index(0.3413413))
P = EquidistantPartition(a = 0, b = 1, n = 10)
P@value(P@index(0.3413413))
P@value(P@index(0.3333333))
n = 10
1e-n
library(glue)
glue("1e-{n}")
glue("1e-{n}")
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
n = .Object@n
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition - 0.5*glue("1e-{n}"), method = "constant")
.Object
})
P = EquidistantPartition(a = 0, b = 1, n = 10)
# Function NA - similar to NA_real_ - not necessary but convenient.
NA_function_ <- function() NA
class(NA_function_) <- c(class(NA_function_),"NA_function_")
is.na.NA_function_ = function(x){T}
is.na(NA_function_)
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
n = .Object@n
eps = glue("1e-{n}")
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition - 0.5*eps, method = "constant")
.Object
})
P = EquidistantPartition(a = 0, b = 1, n = 10)
glue("1e-{n}")
glue("1e-{n}")*1
as.numeric(glue("1e-{n}"))
P = EquidistantPartition(a = 0, b = 1, n = 10)
#¤ New Interpolation Setup ¤#
# Function NA - similar to NA_real_ - not necessary but convenient.
NA_function_ <- function() NA
class(NA_function_) <- c(class(NA_function_),"NA_function_")
is.na.NA_function_ = function(x){T}
is.na(NA_function_)
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
n = .Object@n
eps = as.numeric(glue::glue("1e-{n}"))
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition - 0.5*eps, method = "constant")
.Object
})
P = EquidistantPartition(a = 0, b = 1, n = 10)
P@value(P@index(0.3333333))
source('~/GitHub/CopulaR/R/Interpolations.R', encoding = 'UTF-8')
P@value(P@index(0.3333333))
source('~/GitHub/CopulaR/R/Interpolations.R', encoding = 'UTF-8')
P@value(P@index(0.3333333))
P@value(P@index(0.3333333))
P@value(P@index(0.3333))
P@value(P@index(0.333333333333))
P@value(P@index(0.5))
P = EquidistantPartition(a = 0, b = 1, n = 11)
P@value(P@index(0.5))
P@value(P@index(0.5))
P = EquidistantPartition(a = 0, b = 1, n = 10)
P@value(P@index(0.5))
P@value(P@index(0.55555555))
P@value(P@index(0.55555555555))
source('~/GitHub/CopulaR/R/Interpolations.R', encoding = 'UTF-8')
P = EquidistantPartition(a = 0, b = 1, n = 10)
P@value(P@index(0.55555555555))
P@index(0.55555555555)
seq(0,1, length.out = 10)
P@value(P@index(0.5555556))
P@value(P@index(0.555555555555555))
seq(0,1, length.out = 10) - 1e-10
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
n = .Object@n
eps = as.numeric(glue::glue("1e-{n}"))
.Object@index <- approxfun(x = .Object@partition + 2*eps, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
P = EquidistantPartition(a = 0, b = 1, n = 10)
seq(0,1, length.out = 10) - 1e-10
P@value(P@index(0.555555555555555))
# Function NA - similar to NA_real_ - not necessary but convenient.
NA_function_ <- function() NA
class(NA_function_) <- c(class(NA_function_),"NA_function_")
is.na.NA_function_ = function(x){T}
is.na(NA_function_)
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
n = .Object@n
eps = as.numeric(glue::glue("1e-{n}"))
.Object@index <- approxfun(x = .Object@partition - 2*eps, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
P = EquidistantPartition(a = 0, b = 1, n = 10)
seq(0,1, length.out = 10)
P@value(P@index(0.555555555555555))
# Function NA - similar to NA_real_ - not necessary but convenient.
NA_function_ <- function() NA
class(NA_function_) <- c(class(NA_function_),"NA_function_")
is.na.NA_function_ = function(x){T}
is.na(NA_function_)
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
n = .Object@n
eps = as.numeric(glue::glue("1e-{n}"))
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
P = EquidistantPartition(a = 0, b = 1, n = 10)
seq(0,1, length.out = 10)
P@value(P@index(0.555555555555555))
P@value(P@index(0.4444444))
sprintf(paste0("%.",n,"f"),0.555555555555555)
as.numeric(sprintf(paste0("%.",n,"f"),0.555555555555555))
P@value(P@index(as.numeric(sprintf(paste0("%.",n,"f"),0.555555555555555))))
P@value(P@index(as.numeric(sprintf(paste0("%.",n,"f"),0.555555555555555))))
# Function NA - similar to NA_real_ - not necessary but convenient.
NA_function_ <- function() NA
class(NA_function_) <- c(class(NA_function_),"NA_function_")
is.na.NA_function_ = function(x){T}
is.na(NA_function_)
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
n = .Object@n
eps = as.numeric(glue::glue("1e-{n}"))
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
P = EquidistantPartition(a = 0, b = 1, n = 10)
seq(0,1, length.out = 10)
P@value(P@index(0.555555555555555))
P@value(P@index(as.numeric(sprintf(paste0("%.",n,"f"),0.555555555555555))))
P = EquidistantPartition(a = 0, b = 1, n = 11)
seq(0,1, length.out = 10)
P@value(P@index(0.555555555555555))
P@value(P@index(as.numeric(sprintf(paste0("%.",n,"f"),0.555555555555555))))
P@value(P@index(P@value(P@index(0.555555555555555))))
P = EquidistantPartition(a = 0, b = 1, n = 10)
seq(0,1, length.out = 10)
P@value(P@index(P@value(P@index(0.555555555555555))))
P@value(P@index(P@value(P@index(0.555555555555555))))
P@value(P@index(P@value(P@index(0.555555555555555))))
# Function NA - similar to NA_real_ - not necessary but convenient.
NA_function_ <- function() NA
class(NA_function_) <- c(class(NA_function_),"NA_function_")
is.na.NA_function_ = function(x){T}
is.na(NA_function_)
# Partition of the real interval [a,b]
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
P@index(seq(from = 0, to = 1, length.out = 1000))
microbenchmark::microbenchmark(P@index(seq(from = 0, to = 1, length.out = 1000)))
install.packages('microbenchmark')
microbenchmark::microbenchmark(P@index(seq(from = 0, to = 1, length.out = 1000)))
microbenchmark::microbenchmark(P@index(seq(from = 0, to = 1, length.out = 10000)))
microbenchmark::microbenchmark(P@index(seq(from = 0, to = 1, length.out = 100000)))
microbenchmark::microbenchmark(P@index(seq(from = 0, to = 1, length.out = 1000000)))
setGeneric("Index", function(x,.Object){standardGeneric("Index")})
setMethod("Index", signature(x = "numeric", .Object = "EquidistantPartition"), function(x,.Object){.Object@index(x)})
P = Partition(a = 0, b= 1, n = 100)
P = EquidistantPartition(a = 0, b= 1, n = 100)
Index(0.3, P)
Index(0.3, P)
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
setGeneric("Index", function(x,.Object){standardGeneric("Index")})
setMethod("Index", signature(x = "numeric", .Object = "EquidistantPartition"), function(x,.Object){.Object@index(x)})
setGeneric("Value", function(n,.Object){standardGeneric("Index")})
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
setGeneric("Index", function(x,.Object){standardGeneric("Index")})
setMethod("Index", signature(x = "numeric", .Object = "EquidistantPartition"), function(x,.Object){.Object@index(x)})
setGeneric("Value", function(n,.Object){standardGeneric("Value")})
setMethod("Value", signature(n = "numeric", .Object = "EquidistantPartition"), function(n,.Object){.Object@value(n)})
P = EquidistantPartition(a = 0, b= 1, n = 100)
Index(0.3, P)
Value(3,P)
Index(0.3, P)
Value(3,P)
Partition <- setClass("EquidistantPartition",
representation(
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric",
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_,
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
Partition <- setClass("Partition",
representation(
partition = "numeric",
index = "ANY",
value = "ANY"
),
prototype(
partition = NA_real_,
index = NA_function_,
value = NA_function_
))
EquidistantPartition <- setClass("EquidistantPartition",
representation(
a = "numeric",
b = "numeric",
n = "numeric"
),
prototype(
a = NA_real_,
b = NA_real_,
n = NA_real_
),
contains = "Partition")
setMethod("initialize", signature(.Object = "EquidistantPartition"), function(.Object, ...){
.Object <- callNextMethod(.Object, ...)
if((!any(is.na(c(.Object@a, .Object@b, .Object@n)))) & is.na(.Object@partition)){
.Object@partition <- seq(from = .Object@a, to = .Object@b, length.out = .Object@n)
}else if((!is.na(.Object@partition)) & all(is.na(c(.Object@a, .Object@b, .Object@n)))){
.Object@a <- .Object@partition[1]
.Object@n <- length(.Object@partition)
.Object@b <- .Object@partition[.Object@n]
}else{
stop("Provide either endpoints 'a' and 'b', and length 'n', or a partition.")
}
.Object@index <- approxfun(x = .Object@partition, y = seq(from = 1, to = .Object@n), method = "constant")
.Object@value <- approxfun(x = seq(from = 1, to = .Object@n), y = .Object@partition, method = "constant")
.Object
})
setGeneric("Index", function(x,.Object){standardGeneric("Index")})
setMethod("Index", signature(x = "numeric", .Object = "EquidistantPartition"), function(x,.Object){.Object@index(x)})
setGeneric("Value", function(n,.Object){standardGeneric("Value")})
setMethod("Value", signature(n = "numeric", .Object = "EquidistantPartition"), function(n,.Object){.Object@value(n)})
P = EquidistantPartition(a = 0, b = 1, n = 100)
P@a
P@value
setGeneric("Index", function(x,.Object){standardGeneric("Index")})
setMethod("Index", signature(x = "numeric", .Object = "Partition"), function(x,.Object){.Object@index(x)})
setGeneric("Value", function(n,.Object){standardGeneric("Value")})
setMethod("Value", signature(n = "numeric", .Object = "Partition"), function(n,.Object){.Object@value(n)})
Index(0.3,P)
Index(0.3,P)
